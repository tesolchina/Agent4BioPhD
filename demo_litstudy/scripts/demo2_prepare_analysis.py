"""
Demo Script 2: Preparing Data for Motif Analysis
=================================================

This script demonstrates how an AI agent can bridge literature analysis
with bioinformatics tool preparation. It takes information extracted from
the paper and prepares example data for motifmatchr analysis.

Purpose: Show seamless workflow from paper → analysis preparation
Generated by: AI Agent
"""

import json
import pandas as pd
from pathlib import Path

def load_paper_analysis():
    """Load the results from automated paper analysis."""
    json_path = Path("/workspaces/Agent4BioPhD/outputs/paper_analysis_report.json")
    
    with open(json_path, 'r') as f:
        data = json.load(f)
    
    return data


def create_example_peaks_bed():
    """
    Create example ATAC-seq peak coordinates for motif matching.
    These would normally come from your own data.
    """
    
    # Example peaks - in reality, these come from ATAC-seq data
    peaks_data = {
        'chr': ['chr1', 'chr1', 'chr2', 'chr2', 'chr3', 'chr3', 'chr17', 'chr17'],
        'start': [
            1000000, 2500000, 1500000, 3000000, 
            1200000, 2800000, 7571719, 7590856
        ],
        'end': [
            1000500, 2500500, 1500500, 3000500,
            1200500, 2800500, 7572219, 7591356
        ],
        'peak_id': [f'peak_{i+1}' for i in range(8)],
        'score': [100, 85, 92, 78, 88, 95, 120, 110],
        'annotation': [
            'promoter', 'enhancer', 'promoter', 'enhancer',
            'enhancer', 'promoter', 'promoter', 'enhancer'
        ]
    }
    
    df = pd.DataFrame(peaks_data)
    
    output_path = Path("/workspaces/Agent4BioPhD/outputs/example_peaks.bed")
    
    # Save as BED format (standard for genomic regions)
    df[['chr', 'start', 'end', 'peak_id', 'score']].to_csv(
        output_path, 
        sep='\t', 
        index=False, 
        header=False
    )
    
    # Also save as CSV with headers for easier viewing
    csv_path = output_path.with_suffix('.csv')
    df.to_csv(csv_path, index=False)
    
    print(f"✓ Created example peaks: {output_path}")
    print(f"✓ Human-readable version: {csv_path}")
    print(f"  Total peaks: {len(df)}")
    print(f"  Promoters: {sum(df['annotation'] == 'promoter')}")
    print(f"  Enhancers: {sum(df['annotation'] == 'enhancer')}")
    
    return df


def generate_motifmatchr_script(paper_data):
    """
    Generate R script for motifmatchr analysis based on paper insights.
    """
    
    # Extract relevant databases mentioned in paper
    databases = paper_data['methods_and_tools']['databases']
    tools = paper_data['methods_and_tools']['bioinformatics_tools']
    
    r_script = f'''#!/usr/bin/env Rscript
#
# Demo Script: Motif Matching Analysis
# =====================================
# 
# Based on methods from: Badia-i-Mompel et al. (2023)
# Databases mentioned in paper: {", ".join(databases)}
# Tools referenced: {", ".join(tools)}
#
# This script demonstrates TF motif matching on ATAC-seq peaks
# Generated by: AI Agent
#

library(motifmatchr)
library(GenomicRanges)
library(TFBSTools)
library(BSgenome.Hsapiens.UCSC.hg19)

cat("\\n=== Motif Matching Analysis Demo ===\\n\\n")

# Step 1: Load genomic regions (ATAC-seq peaks)
cat("[1/4] Loading ATAC-seq peaks...\\n")
peaks <- GRanges(
  seqnames = c("chr1", "chr1", "chr2", "chr2", "chr3", "chr3", "chr17", "chr17"),
  ranges = IRanges(
    start = c(1000000, 2500000, 1500000, 3000000, 1200000, 2800000, 7571719, 7590856),
    end =   c(1000500, 2500500, 1500500, 3000500, 1200500, 2800500, 7572219, 7591356)
  ),
  peak_id = paste0("peak_", 1:8)
)

cat(paste("  Loaded", length(peaks), "peaks\\n"))
cat(paste("  Total genomic space:", sum(width(peaks)), "bp\\n\\n"))

# Step 2: Load example motifs
# Note: In real analysis, you would load motifs from JASPAR or other databases
# mentioned in the paper
cat("[2/4] Loading TF binding motifs...\\n")
data(example_motifs, package = "motifmatchr")
cat(paste("  Loaded", length(example_motifs), "example motifs\\n\\n"))

# Step 3: Run motif matching
cat("[3/4] Running motif matching analysis...\\n")
cat("  This uses the MOODS algorithm mentioned in the paper (Box 1)\\n")

motif_matches <- matchMotifs(
  pwms = example_motifs,
  subject = peaks,
  genome = "hg19",
  out = "matches"
)

# Get match matrix
match_matrix <- motifMatches(motif_matches)
cat(paste("  Found matches in", sum(rowSums(match_matrix) > 0), "peaks\\n\\n"))

# Step 4: Summarize results
cat("[4/4] Generating summary statistics...\\n\\n")

# Motifs found per peak
motifs_per_peak <- rowSums(match_matrix)
cat("Motifs per peak:\\n")
print(summary(motifs_per_peak))

# Peaks per motif
peaks_per_motif <- colSums(match_matrix)
cat("\\nPeaks containing each motif:\\n")
motif_summary <- data.frame(
  Motif = colnames(match_matrix),
  Peaks = peaks_per_motif,
  Percentage = round(peaks_per_motif / nrow(match_matrix) * 100, 1)
)
motif_summary <- motif_summary[order(-motif_summary$Peaks), ]
print(motif_summary)

# Export results
output_file <- "/workspaces/Agent4BioPhD/outputs/motif_matches.csv"
write.csv(motif_summary, output_file, row.names = FALSE)
cat(paste("\\n✓ Results saved to:", output_file, "\\n"))

cat("\\n=== Analysis Complete! ===\\n")
cat("\\nKey findings from paper context:\\n")
cat("  • TF binding prediction uses motif databases (JASPAR, TRANSFAC, etc.)\\n")
cat("  • MOODS algorithm efficiently matches motifs to peaks\\n")
cat("  • Combining with gene expression data improves GRN inference\\n")
cat("  • See Badia-i-Mompel et al. (2023) Box 1 for detailed methodology\\n")
'''
    
    output_path = Path("/workspaces/Agent4BioPhD/scripts/demo2_motif_analysis.R")
    with open(output_path, 'w') as f:
        f.write(r_script)
    
    print(f"✓ Generated R script: {output_path}")
    
    return output_path


def create_integration_guide():
    """
    Create a guide showing how to integrate litstudy with motifmatchr.
    """
    
    guide = """
# Integration Guide: Literature Analysis → Motif Analysis
=========================================================

## Workflow Overview

This guide demonstrates how AI agents can create an integrated workflow
that bridges literature analysis (Python/litstudy) with bioinformatics
analysis (R/motifmatchr).

## Step-by-Step Process

### Step 1: Literature Discovery (Python)
```python
import litstudy

# Search for papers on TF binding and ATAC-seq
docs = litstudy.search_semanticscholar("transcription factor binding ATAC-seq")

# Analyze which methods are most common
# Extract tool recommendations
# Identify key databases (JASPAR, TRANSFAC, etc.)
```

### Step 2: Extract Computational Methods (Python)
```python
# Use our demo1_extract_methods.py script
# Automatically identifies:
#   - Relevant tools (motifmatchr, HOMER, FIMO)
#   - Databases (JASPAR, HOCOMOCO)
#   - Experimental approaches (ATAC-seq, ChIP-seq)
```

### Step 3: Prepare Analysis Data (Python)
```python
# Load your ATAC-seq peaks
# Format for R/motifmatchr
# Export as BED or CSV
```

### Step 4: Run Motif Analysis (R)
```r
# Use generated R script (demo2_motif_analysis.R)
# Leverage motifmatchr for fast matching
# Apply insights from literature
```

### Step 5: Interpret Results (Python/R)
```python
# Combine with expression data
# Build gene regulatory networks
# Validate against literature findings
```

## Key Advantages of AI Agent Integration

1. **Automatic Tool Discovery**: Agent finds motifmatchr mentioned in papers
2. **Context-Aware Code**: Generated scripts include paper citations
3. **Cross-Language**: Seamlessly work with Python and R
4. **Reproducible**: All steps documented and version-controlled
5. **Iterative**: Easy to refine based on results

## Example Use Cases

### Use Case 1: Validating Published Methods
- Find paper describing new GRN inference method
- Extract tool names and parameters
- Generate code to replicate analysis
- Compare results with paper claims

### Use Case 2: Meta-Analysis
- Use litstudy to find all papers using motifmatchr
- Extract common analysis patterns
- Generate comparison scripts
- Identify best practices

### Use Case 3: Method Transfer
- Find methods used in one cell type
- Adapt to your cell type of interest
- Generate modified analysis pipeline
- Document assumptions and changes

## Tools Mentioned in Badia-i-Mompel et al. (2023)

Based on automated extraction:

**Motif Matching Tools:**
- motifmatchr (used in this demo)
- FIMO
- HOMER  
- GimmeMotifs
- MOODS

**Databases:**
- JASPAR (most widely used)
- TRANSFAC
- HOCOMOCO
- CIS-BP
- ENCODE
- UniPROBE

**Recommendation**: Start with motifmatchr + JASPAR for compatibility
and wide TF coverage.

## Running the Full Demo

```bash
# Step 1: Extract methods from paper
python scripts/demo1_extract_methods.py

# Step 2: Prepare example data and generate R script
python scripts/demo2_prepare_analysis.py

# Step 3: Run motif analysis (requires R and motifmatchr)
Rscript scripts/demo2_motif_analysis.R
```

## Further Reading

- Badia-i-Mompel et al. (2023) Nature Reviews Genetics
  - Box 1: Binding motif databases and motif matcher algorithms
  - Figure 2: Flow chart of methods for GRN inference
  
- motifmatchr documentation: 
  https://greenleaflab.github.io/motifmatchr/

- litstudy documentation:
  https://nlesc.github.io/litstudy/

---
Generated by: AI Agent
Date: November 7th, 2025 Workshop
"""
    
    output_path = Path("/workspaces/Agent4BioPhD/outputs/integration_guide.md")
    with open(output_path, 'w') as f:
        f.write(guide)
    
    print(f"✓ Created integration guide: {output_path}")
    
    return output_path


if __name__ == "__main__":
    print("=" * 80)
    print("Demo 2: Preparing Data for Cross-Tool Integration")
    print("=" * 80)
    print()
    
    # Load paper analysis results
    print("[1/4] Loading paper analysis results...")
    paper_data = load_paper_analysis()
    print(f"  ✓ Loaded analysis of {len(paper_data['methods_and_tools'])} categories")
    print()
    
    # Create example peaks
    print("[2/4] Creating example ATAC-seq peaks...")
    peaks_df = create_example_peaks_bed()
    print()
    
    # Generate R script for motifmatchr
    print("[3/4] Generating motifmatchr analysis script...")
    r_script_path = generate_motifmatchr_script(paper_data)
    print()
    
    # Create integration guide
    print("[4/4] Creating integration guide...")
    guide_path = create_integration_guide()
    print()
    
    print("=" * 80)
    print("Demo 2 Complete! ✓")
    print("=" * 80)
    print()
    print("Next steps:")
    print("  1. Review the generated files in outputs/")
    print("  2. Examine the R script in scripts/demo2_motif_analysis.R")
    print("  3. Read the integration guide: outputs/integration_guide.md")
    print("  4. (Optional) Run the R script if you have motifmatchr installed")
    print()
    print("This demonstrates how AI agents can:")
    print("  ✓ Read and understand scientific papers")
    print("  ✓ Extract relevant computational methods")
    print("  ✓ Prepare data for analysis")
    print("  ✓ Generate executable code in multiple languages")
    print("  ✓ Create documentation bridging tools")
    print()
